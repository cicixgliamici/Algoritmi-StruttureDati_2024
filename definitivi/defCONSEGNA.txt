/* 5 Strutture dati   Ingredienti:      Hash di min-Heap  -> Ingredienti ordinati per scadenza nel min-Heap, lessicograficamente per lotti
*                     Ricette:          Hash di liste     -> Si punta sulla velocità dell'hash in ricerca, inserimento ed eliminazione
*                     Ordini da Fare:   Coda FIFO         -> Mantiene l'ordine di arrivo degli ordini
*                     Ordini fatti:     min-Heap          -> Istante di arrivo dell'ordine
*                     Camioncino:       max-Heap          -> Peso totale dell'ordine (a parità di peso, istante di arrivo)
*/

/* Come funziona      Min/MaxHeap:      Albero binario in cui ogni nodo è minore/maggiore dei suoi figli -> la root è il numero minimo/massimo
*                                       Ci sono sostanzialmente due MinHeap uguali con le stesse funzioni ma ho preferito separarli per avere maggiore chiarezza in fase di debugg (dovrei fare altri tipi di dato 
*                                       oltretutto)
*                     Tabella di Hash:  Funzione di Hash genera una chiave che verrà usata come indice di un "array" -> O(1) per le ricerche e l'inserimento
*                                       Idem con patate per quanto riguarda il fatto che ce ne siano 2 pressoché uguali (condividono la funzione generatrice)
*                     Coda:             Coda FIFO, chi prima entra prima esce
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <limits.h>

#define INITIAL_TABLE_SIZE 101          // Andiamo a tentoni per capire la dimensione che riduce le collisioni (dovrebbe essere primo)
#define LOAD_FACTOR_THRESHOLD 0.75      // Determina quando la tabella hash deve essere ridimensionata
#define INITIAL_HEAP_CAPACITY 256

/* Ingredienti: IngredienteMinHeap->MinHeapIngrediente->NodoHashIngrediente->HashTableIngredienti
*               Bisogna rispettare la proprietà dell'usare sempre gli ingredienti a scadenza più breve
*               Il MinHeap puntato dalla tabella conserva il peso totale di quell'ingrediente, per velocizzare il tutto nel controllo di fattibilità
*/
typedef struct IngredienteMinHeap {
    int scadenza;
    int quantita;
} IngredienteMinHeap;

typedef struct {
    IngredienteMinHeap* lotto;
    int dimensione;
    int capacita;
    int quantita_totale;
} MinHeapIngrediente;

typedef struct NodoHashIngrediente {
    char nome[20];
    MinHeapIngrediente heap;
    struct NodoHashIngrediente* next;
} NodoHashIngrediente;

typedef struct {
    NodoHashIngrediente** buckets;
    int size;
    int count;
} HashTableIngredienti;

void scambia(IngredienteMinHeap* a, IngredienteMinHeap* b);
void heapifyIngredienti(MinHeapIngrediente* heap, int i);
void inserisciIngrediente(MinHeapIngrediente* heap, int scadenza, int quantita);
void liberaLotto(MinHeapIngrediente* heap);
IngredienteMinHeap rimuoviIngrediente(MinHeapIngrediente* heap);
MinHeapIngrediente nuovoHeapIngredienti(int capacita);

void inserisciIngredienteHash(HashTableIngredienti* table, const char* nome, int scadenza, int quantita);
void rimuoviIngredienteHash(HashTableIngredienti* table, const char* nome);
void liberaTabellaHashIngredienti(HashTableIngredienti* table);
NodoHashIngrediente* creaNodoHashIngrediente(const char* nome, int capacita);
NodoHashIngrediente* cercaIngredienteHash(HashTableIngredienti* table, const char* nome);
HashTableIngredienti* creaTabellaHashIngredienti(int size);

/* Ricette: IngredienteRicetta->Ricetta->NodoHashRicetta->HashTableRicette
*           Nessuna proprietà da soddisfare, serve solo essere veloci perché fai molti inserimenti/eliminazioni e ricerche
*/
typedef struct IngredienteRicetta {
    char nome[20];
    int quantita;
    struct IngredienteRicetta *next;
} IngredienteRicetta;

typedef struct Ricetta {
    char nome[20];
    IngredienteRicetta *ingredienti;
} Ricetta;

typedef struct NodoHashRicetta {
    char nome[20];
    Ricetta ricetta;
    struct NodoHashRicetta* next;
} NodoHashRicetta;

typedef struct {
    NodoHashRicetta** buckets;
    int size;
    int count;
} HashTableRicette;

void liberaListaIng(IngredienteRicetta* ingrediente);

void liberaTabellaHashRicette(HashTableRicette* table);
void inserisciRicettaHash(HashTableRicette* table, Ricetta ricetta);
void rimuoviRicettaHash(HashTableRicette* table, const char* nome);
HashTableRicette* creaTabellaHashRicette(int size);
NodoHashRicetta* creaNodoHashRicetta(Ricetta ricetta);
NodoHashRicetta* cercaRicettaHash(HashTableRicette* table, const char* nome);

/* Ordini presi in consegna:  Ordine->CodaOrdini
*                             Bisogna sempre fare gli ordini arrivati per tempo di arrivo e ricontrollarli ad ogni rifornimento 
*/
typedef struct Ordine {
    int tempo_arrivo;
    char nome_ricetta[20];
    int quantita;
    struct Ordine* next;
} Ordine;

typedef struct {
    Ordine* testa;
    Ordine* coda;
} CodaOrdini;

void liberaCoda(CodaOrdini* coda);
void aggiungiCoda(CodaOrdini* coda, const char* nome_ricetta, int quantita, int tempo_arrivo);
int codaVuota(CodaOrdini* coda);
CodaOrdini* creaCoda();
Ordine* rimuoviCoda(CodaOrdini* coda);

/* Ordini fatti:  OrdineHeap->MinHeap
*                 Bisogna anche sceglierli per tempo di arrivo ma poi caricarli per peso (NB al primo che sfora il peso mi fermo) 
*/
typedef struct OrdineHeap {
    int tempo_arrivo;
    char ricetta[20];
    int quantita;
} OrdineHeap;

typedef struct {
    OrdineHeap* ordini;
    int dimensione;
    int capacita;
} MinHeap;

void liberaMinHeapOrdini(MinHeap* heap);
void scambiaOrdini(OrdineHeap* a, OrdineHeap* b);
void heapifyOrdini(MinHeap* heap, int i);
void inserisciOrdineHeap(MinHeap* heap, int tempo_arrivo, char* ricetta, int quantita);
int heapVuotoMinOrdine(MinHeap* heap);
MinHeap* creaMinHeap(int capacita);
OrdineHeap rimuoviMin(MinHeap* heap);

/* Spedizioni: Spedizione->MaxHeapSpedizioni
*              Ordinato per peso, il maxHeap alla fine si poteva fare con un array e un sort tipo bubble o qsort però così mi risulta più semplice
*/
typedef struct Spedizione {
    char nome[20];
    int istante_arrivo;
    int quantita;
    int peso;
} Spedizione;

typedef struct {
    Spedizione* spedizioni;
    int dimensione;
    int capacita;
} MaxHeapSpedizioni;

void heapifySpedizioni(MaxHeapSpedizioni* heap, int i);
void inserisciSpedizione(MaxHeapSpedizioni* heap, char* nome, int istante_arrivo, int quantita, int peso);
void liberaMaxHeap(MaxHeapSpedizioni* heap);
int MaxHeapVuoto(MaxHeapSpedizioni* heap);
MaxHeapSpedizioni* creaMaxHeap(int capacita);
Spedizione rimuoviMax(MaxHeapSpedizioni* heap);

// Funzione della tabella di hash che è generica per entrambe 
unsigned int hash(const char* str, int size);

/* Funzioni di lettura file
*/
char* letturaRiga(FILE* file);
void gestioneComandi(FILE *file);

/* Funzioni da "comando"
*/
void aggiungi_ricetta(Ricetta nuova_ricetta);
void rimuovi_ricetta(const char* nome_ricetta);
void rifornimento(const char* comando);
void ordine(const char* nome_ricetta, int numero_elementi_ordinati);

/* Gestione ordine e riempimento camion: verificare sempre la fattibilità prima della preparazione (almeno non tolgo e rimetto roba inutilmente)
*/
bool fattibilita(const char* nome_ricetta, int numero_elementi_ordinati);
void preparazione(const char* nome_ricetta, int numero_elementi_ordinati, int tempo_arrivo);
void verificaOrdini();
void caricaCamion();
int calcolaPeso(Ricetta ricetta, int numero_elementi_ordinati);

/* Variabili Globali: parto da -1 nel tempo per la lettura del tempo/capienza del camioncino, le strutture dati sono globali almeno non ho doppi puntatori ovunque (e forse va anche più veloce)
*/
int tempoCorrente = -1;
int capienzaCamion;
HashTableIngredienti* hashTableIngredienti = NULL;
HashTableRicette* hashTableRicette = NULL;
CodaOrdini* coda_ordini = NULL;
MinHeap* heap_ordini_fatti = NULL;
MaxHeapSpedizioni* max_heap_spedizioni = NULL;

int main(void) {
    hashTableIngredienti = creaTabellaHashIngredienti(INITIAL_TABLE_SIZE);
    hashTableRicette = creaTabellaHashRicette(INITIAL_TABLE_SIZE);
    FILE *file = stdin;
    gestioneComandi(file);
    fclose(file);
    return 0;
}

/*
*   Zona Algoritmo
*/

//Lettura da File: Per cercare di ottimizzare, ipotizzo una lunghezza della riga che devo leggere
//                 e in caso la allungo (funziona bene da open7 in su)
char* letturaRiga(FILE* file) {
    size_t capacita = 256;
    char *riga = (char *)malloc(capacita);
    if (fgets(riga, capacita, file) != NULL) {
        size_t lunghezza = strlen(riga);
        while (lunghezza > 0 && riga[lunghezza - 1] != '\n') {
            capacita *= 2;
            riga = (char *)realloc(riga, capacita);
            if (fgets(riga + lunghezza, capacita - lunghezza, file) == NULL) {
                break;
            }
            lunghezza = strlen(riga);
        }
        riga[strcspn(riga, "\n")] = 0;
    } else {
        free(riga);
        riga = NULL;
    }
    return riga;
}

//Crea il maxHeap sulla base del camioncino, ma non troppo grande sennò mi da memory leaks (open 6/7), dopodiché vedi se tempoCorrente è multiplo di tempoCamion (se sì passa), sennnò leggi il comando
//Importante: se finiamo a un (tempoCamion*n)-1, dobbiamo passare col camion alla fine
//Le letture sono dimensionate in base alla lunghezza dei comandi letti e al fatto che ingredienti e ricette non dovrebbero essere più lunghe di 20-25 caratteri
void gestioneComandi(FILE *file) {
    int tempoCamion, capacitaMaxHeap = 0;
    if (fscanf(file, "%d %d", &tempoCamion, &capienzaCamion) != 2);
    if (capienzaCamion >= 100000) {
        capacitaMaxHeap = capienzaCamion / 1000;
    }
    else {
        capacitaMaxHeap = capienzaCamion;
    }
    max_heap_spedizioni = creaMaxHeap(capacitaMaxHeap);
    coda_ordini = creaCoda();
    heap_ordini_fatti = creaMinHeap(INITIAL_HEAP_CAPACITY);
    char *line;
    while ((line = letturaRiga(file)) != NULL) {
        char comando[20];
        if (sscanf(line, "%19s", comando) == 1) {
            tempoCorrente++;
            if (tempoCorrente % tempoCamion == 0 && tempoCorrente != 0) {
                caricaCamion();
            }
            if (strcmp(comando, "aggiungi_ricetta") == 0) {
                char nome_ricetta[25];
                if (sscanf(line + strlen(comando), "%24s", nome_ricetta) == 1) {
                    if (cercaRicettaHash(hashTableRicette, nome_ricetta) != NULL) {
                        printf("ignorato\n");
                    }
                    else {
                        Ricetta nuova_ricetta;
                        strncpy(nuova_ricetta.nome, nome_ricetta, sizeof(nuova_ricetta.nome) - 1);
                        nuova_ricetta.nome[sizeof(nuova_ricetta.nome) - 1] = '\0';
                        nuova_ricetta.ingredienti = NULL;
                        IngredienteRicetta *tail = NULL;
                        char ingrediente[25];
                        int quantita;
                        char *ptr = line + strlen(comando) + strlen(nome_ricetta) + 1;
                        while (sscanf(ptr, "%24s %d", ingrediente, &quantita) == 2) {
                            IngredienteRicetta *nuovo_ingrediente = (IngredienteRicetta*)malloc(sizeof(IngredienteRicetta));
                            strncpy(nuovo_ingrediente->nome, ingrediente, sizeof(nuovo_ingrediente->nome) - 1);
                            nuovo_ingrediente->nome[sizeof(nuovo_ingrediente->nome) - 1] = '\0';
                            nuovo_ingrediente->quantita = quantita;
                            nuovo_ingrediente->next = NULL;
                            if (tail == NULL) {
                                nuova_ricetta.ingredienti = nuovo_ingrediente;
                            } else {
                                tail->next = nuovo_ingrediente;
                            }
                            tail = nuovo_ingrediente;
                            ptr += strlen(ingrediente) + 1 + snprintf(NULL, 0, "%d", quantita) + 1;
                        }
                        inserisciRicettaHash(hashTableRicette, nuova_ricetta);
                        printf("aggiunta\n");
                    }
                }
            }
            else if (strcmp(comando, "rimuovi_ricetta") == 0) {
                char nome_ricetta[25];
                if (sscanf(line + strlen(comando), "%24s", nome_ricetta) == 1) {
                    rimuovi_ricetta(nome_ricetta);
                }
            }
            else if (strcmp(comando, "rifornimento") == 0) {
                rifornimento(line + strlen(comando) + 1);
            }
            else if (strcmp(comando, "ordine") == 0) {
                char nome_ricetta[25];
                int quantita;
                if (sscanf(line + strlen(comando), "%24s %d", nome_ricetta, &quantita) == 2) {
                    ordine(nome_ricetta, quantita);
                }
            }
        }
        free(line);
    }
    if ((tempoCorrente + 1) % tempoCamion == 0 && tempoCorrente != 0) {
        caricaCamion();
    }
}

// Funzioni da comando
void aggiungi_ricetta(Ricetta nuova_ricetta) {
    if (cercaRicettaHash(hashTableRicette, nuova_ricetta.nome) != NULL) {
        printf("ignorato\n");
    } else {
        inserisciRicettaHash(hashTableRicette, nuova_ricetta);
        printf("aggiunta\n");
    }
}

void rimuovi_ricetta(const char* nome_ricetta) {
    Ordine* ordine_corrente = coda_ordini->testa;
    for (int i = 0; i < heap_ordini_fatti->dimensione; i++) {
        if (strcmp(heap_ordini_fatti->ordini[i].ricetta, nome_ricetta) ==0) {
            printf("ordini in sospeso\n");
            return;
            }
    }
    while (ordine_corrente != NULL) {
        if (strcmp(ordine_corrente->nome_ricetta, nome_ricetta)==0) {
            printf("ordini in sospeso\n");
            return;
        }
        ordine_corrente = ordine_corrente->next;
    }
    if (cercaRicettaHash(hashTableRicette, nome_ricetta)==NULL) {
        printf("non presente\n");
    }
    else {
        rimuoviRicettaHash(hashTableRicette, nome_ricetta);
        printf("rimossa\n");
    }
}

void rifornimento(const char* comando) {
    char nome_ingrediente[25];
    int quantita, scadenza;
    const char *ptr = comando;
    while (sscanf(ptr, "%s %d %d", nome_ingrediente, &quantita, &scadenza)== 3) {
        inserisciIngredienteHash(hashTableIngredienti, nome_ingrediente, scadenza, quantita);
        ptr += strlen(nome_ingrediente) +1+ snprintf(NULL, 0, "%d", quantita) +1+ snprintf(NULL, 0, "%d", scadenza) +1;
    }
    printf("rifornito\n");
    verificaOrdini();
}

void ordine(const char* nome_ricetta, int numero_elementi_ordinati) {
    NodoHashRicetta* nodo_ricetta = cercaRicettaHash(hashTableRicette, nome_ricetta);
    if (nodo_ricetta == NULL) {
        printf("rifiutato\n");
        return;
    }
    if (fattibilita(nome_ricetta, numero_elementi_ordinati)) {
        preparazione(nome_ricetta, numero_elementi_ordinati, tempoCorrente);
        printf("accettato\n");
    } 
    else {
        aggiungiCoda(coda_ordini, nome_ricetta, numero_elementi_ordinati, tempoCorrente);
        printf("accettato\n");
    }
}

// Gestione ordini e caricamento camioncino - prima si vede se effetivamente si possono fare con la quantità totale presente
// poi eventualmente si tolgono, perché a fare togli e rimetti sicuro mi perdo qualcosa
bool fattibilita(const char* nome_ricetta, int numero_elementi_ordinati) {
    NodoHashRicetta* nodo_ricetta = cercaRicettaHash(hashTableRicette, nome_ricetta);
    if (nodo_ricetta == NULL) return false;
    IngredienteRicetta* ing = nodo_ricetta->ricetta.ingredienti;
    while (ing != NULL) {
        NodoHashIngrediente* nodo_ingrediente = cercaIngredienteHash(hashTableIngredienti, ing->nome);
        if (nodo_ingrediente == NULL) 
            return false;
        if (nodo_ingrediente->heap.lotto[0].scadenza <= tempoCorrente) {
            while (nodo_ingrediente->heap.dimensione > 0 && nodo_ingrediente->heap.lotto[0].scadenza <= tempoCorrente) {
                rimuoviIngrediente(&nodo_ingrediente->heap);
            }
        }
        if (nodo_ingrediente->heap.quantita_totale < ing->quantita * numero_elementi_ordinati) {
            return false;
        }
        ing = ing->next;
    }
    return true;
}

void preparazione(const char* nome_ricetta, int numero_elementi_ordinati, int tempo_arrivo) {
    NodoHashRicetta* nodo_ricetta = cercaRicettaHash(hashTableRicette, nome_ricetta);
    IngredienteRicetta* ing = nodo_ricetta->ricetta.ingredienti;
    while (ing != NULL) {
        NodoHashIngrediente* nodo_ingrediente = cercaIngredienteHash(hashTableIngredienti, ing->nome);
        int quantita_richiesta = ing->quantita * numero_elementi_ordinati;
        while (quantita_richiesta > 0) {
            IngredienteMinHeap min_ingrediente = rimuoviIngrediente(&nodo_ingrediente->heap);
            if (min_ingrediente.quantita <= quantita_richiesta) {
                quantita_richiesta -= min_ingrediente.quantita;
            } 
            else {
                min_ingrediente.quantita -= quantita_richiesta;
                quantita_richiesta = 0;
                inserisciIngrediente(&nodo_ingrediente->heap, min_ingrediente.scadenza, min_ingrediente.quantita);
            }
        }
        ing = ing->next;
    }
    inserisciOrdineHeap(heap_ordini_fatti, tempo_arrivo, (char*)nome_ricetta, numero_elementi_ordinati);
}

void verificaOrdini() {
    Ordine* ordineCorrente = coda_ordini->testa;
    Ordine* precedente = NULL;
    while (ordineCorrente != NULL) {
        if (fattibilita(ordineCorrente->nome_ricetta, ordineCorrente->quantita)) {
            preparazione(ordineCorrente->nome_ricetta, ordineCorrente->quantita, ordineCorrente->tempo_arrivo);
            if (precedente == NULL) {
                coda_ordini->testa = ordineCorrente->next;
                if (coda_ordini->testa == NULL) {
                    coda_ordini->coda = NULL;
                }
            } 
            else {
                precedente->next = ordineCorrente->next;
                if (precedente->next == NULL) {
                    coda_ordini->coda = precedente;
                    }
            }
            Ordine* temp = ordineCorrente;
            ordineCorrente = ordineCorrente->next;
            free(temp);
        } else {
            precedente = ordineCorrente;
            ordineCorrente = ordineCorrente->next;
        }
    }
}

void caricaCamion() {
    if (heapVuotoMinOrdine(heap_ordini_fatti)) {
        printf("camioncino vuoto\n");
        return;
    }
    int capienzaRestante = capienzaCamion;
    MinHeap* tempHeap = creaMinHeap(heap_ordini_fatti->capacita);
    while (!heapVuotoMinOrdine(heap_ordini_fatti)) {
        OrdineHeap ordine = rimuoviMin(heap_ordini_fatti);
        NodoHashRicetta* nodo_ricetta = cercaRicettaHash(hashTableRicette, ordine.ricetta);
        int peso_ordine = calcolaPeso(nodo_ricetta->ricetta, ordine.quantita);
        if (peso_ordine <= capienzaRestante) {
            inserisciSpedizione(max_heap_spedizioni, ordine.ricetta, ordine.tempo_arrivo, ordine.quantita, peso_ordine);
            capienzaRestante -= peso_ordine;
        } else {
            inserisciOrdineHeap(tempHeap, ordine.tempo_arrivo, ordine.ricetta, ordine.quantita);
            break;
            }
    }
    while (!heapVuotoMinOrdine(heap_ordini_fatti)) {
        OrdineHeap ordine = rimuoviMin(heap_ordini_fatti);
        inserisciOrdineHeap(tempHeap, ordine.tempo_arrivo, ordine.ricetta, ordine.quantita);
    }
    while (!heapVuotoMinOrdine(tempHeap)) {
        OrdineHeap ordine = rimuoviMin(tempHeap);
        inserisciOrdineHeap(heap_ordini_fatti, ordine.tempo_arrivo, ordine.ricetta, ordine.quantita);
    }
    liberaMinHeapOrdini(tempHeap);
    if (!heapVuotoMax(max_heap_spedizioni)) {
        while (!heapVuotoMax(max_heap_spedizioni)) {
            Spedizione spedizione = rimuoviMax(max_heap_spedizioni);
            printf("%d %s %d\n", spedizione.istante_arrivo, spedizione.nome, spedizione.quantita);
        }
    }
}

int calcolaPeso(Ricetta ricetta, int numero_elementi_ordinati) {
    int peso=0;
    IngredienteRicetta* ingrediente = ricetta.ingredienti;
    while (ingrediente !=NULL) {
        peso+= ingrediente->quantita;
        ingrediente = ingrediente->next;
    }
    peso*= numero_elementi_ordinati;
    return peso;
}

/*
*   Zona Strutture Dati
*/
// Funzione di Hash: Sposta 5 bit a sinistra (moltiplica per 32) + somma dei valori ASCII della stringa che passi -> cose semplici funzionano sempre
unsigned int hash(const char* str, int size) {
    unsigned int hash = 0;
    while (*str) {
        hash = (hash << 5) + *str++;
    }
    return hash%size;
}

// Ingredienti - un classicone questo
void scambia(IngredienteMinHeap* a, IngredienteMinHeap* b) {
    IngredienteMinHeap temp = *a;
    *a = *b;
    *b = temp;
}

void heapifyIngredienti(MinHeapIngrediente* heap, int i) {
    int minore = i;
    int sx = 2*i+1;
    int dx = 2*i+2;
    if (sx < heap->dimensione && heap->lotto[sx].scadenza < heap->lotto[minore].scadenza) {
        minore = sx;
        }
    if (dx < heap->dimensione && heap->lotto[dx].scadenza < heap->lotto[minore].scadenza) {
        minore = dx;
        }
    if (minore != i) {
        scambia(&heap->lotto[i], &heap->lotto[minore]);
        heapifyIngredienti(heap, minore);
        }
}

void inserisciIngrediente(MinHeapIngrediente* heap, int scadenza, int quantita) {
    if (heap->dimensione == heap->capacita) {
        heap->capacita*= 2;
        heap->lotto = (IngredienteMinHeap*)realloc(heap->lotto, heap->capacita*sizeof(IngredienteMinHeap));
    }
    int i = heap->dimensione++;
    heap->lotto[i].scadenza = scadenza;
    heap->lotto[i].quantita = quantita;
    heap->quantita_totale += quantita;
    while (i != 0 && heap->lotto[(i-1)/2].scadenza > heap->lotto[i].scadenza) {
        scambia(&heap->lotto[i], &heap->lotto[(i-1)/2]);
        i = (i-1)/2;
    }
}

IngredienteMinHeap rimuoviIngrediente(MinHeapIngrediente* heap) {
    if (heap->dimensione == 0) {
        IngredienteMinHeap ingredienteVuoto = { INT_MAX, 0 };
        return ingredienteVuoto;
    }
    IngredienteMinHeap radice = heap->lotto[0];
    heap->lotto[0] = heap->lotto[--heap->dimensione];
    heap->quantita_totale -= radice.quantita;
    heapifyIngredienti(heap, 0);
     return radice;
}

MinHeapIngrediente nuovoHeapIngredienti(int capacita) {
    MinHeapIngrediente heap;
    heap.lotto = (IngredienteMinHeap*)malloc(capacita * sizeof(IngredienteMinHeap));
    heap.dimensione =0;
    heap.capacita = capacita;
    heap.quantita_totale = 0;
    return heap;
}

void liberaLotto(MinHeapIngrediente* heap) {
    if (heap !=NULL && heap->lotto !=NULL) {
        free(heap->lotto);
        heap->lotto = NULL;
        heap->dimensione =0;
        heap->capacita =0;
        heap->quantita_totale =0;
        }
}

HashTableIngredienti* creaTabellaHashIngredienti(int size) {
    HashTableIngredienti* table = (HashTableIngredienti*)malloc(sizeof(HashTableIngredienti));
    table->buckets = (NodoHashIngrediente**)calloc(size, sizeof(NodoHashIngrediente*));
    table->size = size;
    table->count =0;
    return table;
}

void liberaTabellaHashIngredienti(HashTableIngredienti* table) {
    for (int i = 0; i < table->size; i++) {
        NodoHashIngrediente* nodo = table->buckets[i];
        while (nodo) {
            NodoHashIngrediente* temp = nodo;
            nodo = nodo->next;
            liberaLotto(&temp->heap);
            free(temp);
        }
    }
    free(table->buckets);
    free(table);
}

NodoHashIngrediente* creaNodoHashIngrediente(const char* nome, int capacita) {
    NodoHashIngrediente* nodo = (NodoHashIngrediente*)malloc(sizeof(NodoHashIngrediente));
    strcpy(nodo->nome, nome);
    nodo->heap = nuovoHeapIngredienti(capacita);
    nodo->next = NULL;
    return nodo;
}

void inserisciIngredienteHash(HashTableIngredienti* table, const char* nome, int scadenza, int quantita) {
    if (table->count >= table->size * LOAD_FACTOR_THRESHOLD) {
        int newSize = table->size*2;
        NodoHashIngrediente** newBuckets = (NodoHashIngrediente**)calloc(newSize, sizeof(NodoHashIngrediente*));
        for (int i = 0; i < table->size; i++) {
            NodoHashIngrediente* nodo = table->buckets[i];
            while (nodo) {
                NodoHashIngrediente* next = nodo->next;
                unsigned int newBucket = hash(nodo->nome, newSize);
                nodo->next = newBuckets[newBucket];
                newBuckets[newBucket] = nodo;
                nodo = next;
            }
        }
        free(table->buckets);
        table->buckets = newBuckets;
        table->size = newSize;
    }
    unsigned int bucket = hash(nome, table->size);
    NodoHashIngrediente* nodo = table->buckets[bucket];
    while (nodo) {
        if (strcmp(nodo->nome, nome) == 0) {
            inserisciIngrediente(&nodo->heap, scadenza, quantita);
            return;
            }
        nodo = nodo->next;
    }
    NodoHashIngrediente* nuovoNodo = creaNodoHashIngrediente(nome, INITIAL_HEAP_CAPACITY);
    inserisciIngrediente(&nuovoNodo->heap, scadenza, quantita);
    nuovoNodo->next = table->buckets[bucket];
    table->buckets[bucket] = nuovoNodo;
    table->count++;
}

NodoHashIngrediente* cercaIngredienteHash(HashTableIngredienti* table, const char* nome) {
    unsigned int bucket = hash(nome, table->size);
    NodoHashIngrediente* nodo = table->buckets[bucket];
    while (nodo) {
        if (strcmp(nodo->nome, nome) == 0) {
            return nodo;
        }
        nodo = nodo->next;
    }
    return NULL;
}

void rimuoviIngredienteHash(HashTableIngredienti* table, const char* nome) {
    unsigned int bucket = hash(nome, table->size);
    NodoHashIngrediente* nodo = table->buckets[bucket];
    NodoHashIngrediente* prev = NULL;
    while (nodo) {
        if (strcmp(nodo->nome, nome) == 0) {
            if (prev) {
                prev->next = nodo->next;
            } else {
                table->buckets[bucket] = nodo->next;
            }
            liberaLotto(&nodo->heap);
            free(nodo);
            table->count--;
            return;
        }
        prev = nodo;
        nodo = nodo->next;
    }
}

// Ricette
void liberaListaIng(IngredienteRicetta* ingrediente) {
    IngredienteRicetta* temp;
    while (ingrediente != NULL) {
        temp = ingrediente;
        ingrediente = ingrediente->next;
        free(temp);
    }
}

void liberaTabellaHashRicette(HashTableRicette* table) {
    for (int i = 0; i < table->size; i++) {
        NodoHashRicetta* nodo = table->buckets[i];
        while (nodo) {
            NodoHashRicetta* temp = nodo;
            nodo = nodo->next;
            IngredienteRicetta* ingrediente = temp->ricetta.ingredienti;
            while (ingrediente != NULL) {
                IngredienteRicetta* tempIng = ingrediente;
                ingrediente = ingrediente->next;
                free(tempIng);
            }
            free(temp);
        }
    }
    free(table->buckets);
    free(table);
}

void inserisciRicettaHash(HashTableRicette* table, Ricetta ricetta) {
    if (table->count >= table->size * LOAD_FACTOR_THRESHOLD) {
        int newSize = table->size * 2;
        NodoHashRicetta** newBuckets = (NodoHashRicetta**)calloc(newSize, sizeof(NodoHashRicetta*));
        for (int i = 0; i < table->size; i++) {
            NodoHashRicetta* nodo = table->buckets[i];
            while (nodo) {
                NodoHashRicetta* next = nodo->next;
                unsigned int newBucket = hash(nodo->nome, newSize);
                nodo->next = newBuckets[newBucket];
                newBuckets[newBucket] = nodo;
                nodo = next;
                }
        }
        free(table->buckets);
        table->buckets = newBuckets;
        table->size = newSize;
    }
    unsigned int bucket = hash(ricetta.nome, table->size);
    NodoHashRicetta* nodo = table->buckets[bucket];
    while (nodo) {
        if (strcmp(nodo->nome, ricetta.nome) == 0) {
            return;
        }
        nodo = nodo->next;
    }
    NodoHashRicetta* nuovoNodo = creaNodoHashRicetta(ricetta);
    nuovoNodo->next = table->buckets[bucket];
    table->buckets[bucket] = nuovoNodo;
    table->count++;
}

void rimuoviRicettaHash(HashTableRicette* table, const char* nome) {
    unsigned int bucket = hash(nome, table->size);
    NodoHashRicetta* nodo = table->buckets[bucket];
    NodoHashRicetta* prev = NULL;
    while (nodo) {
        if (strcmp(nodo->nome, nome) == 0) {
            if (prev) {
                prev->next = nodo->next;
            } else {
                table->buckets[bucket] = nodo->next;
            }
            IngredienteRicetta* ingrediente = nodo->ricetta.ingredienti;
            while (ingrediente != NULL) {
                IngredienteRicetta* tempIng = ingrediente;
                ingrediente = ingrediente->next;
                free(tempIng);
            }
            free(nodo);
            table->count--;
            return;
            }
        prev = nodo;
        nodo = nodo->next;
    }
}

HashTableRicette* creaTabellaHashRicette(int size) {
    HashTableRicette* table = (HashTableRicette*)malloc(sizeof(HashTableRicette));
    table->buckets = (NodoHashRicetta**)calloc(size, sizeof(NodoHashRicetta*));
    table->size = size;
    table->count = 0;
    return table;
}

NodoHashRicetta* creaNodoHashRicetta(Ricetta ricetta) {
    NodoHashRicetta* nodo = (NodoHashRicetta*)malloc(sizeof(NodoHashRicetta));
    strcpy(nodo->nome, ricetta.nome);
    nodo->ricetta = ricetta;
    nodo->next = NULL;
    return nodo;
}

NodoHashRicetta* cercaRicettaHash(HashTableRicette* table, const char* nome) {
    unsigned int bucket = hash(nome, table->size);
    NodoHashRicetta* nodo = table->buckets[bucket];
    while (nodo) {
        if (strcmp(nodo->nome, nome) == 0) {
            return nodo;
        }
        nodo = nodo->next;
    }
    return NULL;
}
// Coda Ordini da fare
void liberaCoda(CodaOrdini* coda) {
    Ordine* temp;
    while (coda->testa != NULL) {
        temp = coda->testa;
        coda->testa = coda->testa->next;
        free(temp);
        }
    free(coda);
}

void aggiungiCoda(CodaOrdini* coda, const char* nome_ricetta, int quantita, int tempo_arrivo) {
    Ordine* nuovoOrdine = (Ordine*)malloc(sizeof(Ordine));
    nuovoOrdine->tempo_arrivo = tempo_arrivo;
    strcpy(nuovoOrdine->nome_ricetta, nome_ricetta);
    nuovoOrdine->quantita = quantita;
    nuovoOrdine->next = NULL;
    if (coda->coda == NULL) {
        coda->testa = nuovoOrdine;
        coda->coda = nuovoOrdine;
    }
    else {
        coda->coda->next = nuovoOrdine;
        coda->coda = nuovoOrdine;
    }
}

int codaVuota(CodaOrdini* coda) {
    return coda->testa == NULL;
}

CodaOrdini* creaCoda() {
    CodaOrdini* coda = (CodaOrdini*)malloc(sizeof(CodaOrdini));
    coda->testa = NULL;
    coda->coda = NULL;
    return coda;
}

Ordine* rimuoviCoda(CodaOrdini* coda) {
    if (coda->testa == NULL) {
        return NULL;
    }
    Ordine* ordineRimosso = coda->testa;
    coda->testa = coda->testa->next;
    if (coda->testa == NULL) {
        coda->coda = NULL;
    }
    free(ordineRimosso);
    return coda->testa;
}

// MinHeap Ordini fatti
void liberaMinHeapOrdini(MinHeap* heap) {
    free(heap->ordini);
    free(heap);
}

void scambiaOrdini(OrdineHeap* a, OrdineHeap* b) {
    OrdineHeap temp = *a;
    *a = *b;
    *b = temp;
}
//Praticamente uguale all'altro però ne faccio due diversi per non fare disastri
void heapifyOrdini(MinHeap* heap, int i) {
    int min = i;
    int sx = 2*i+1;
    int dx = 2*i+2;
    if (sx < heap->dimensione && heap->ordini[sx].tempo_arrivo < heap->ordini[min].tempo_arrivo) {
        min = sx;
    }
    if (dx < heap->dimensione && heap->ordini[dx].tempo_arrivo < heap->ordini[min].tempo_arrivo) {
        min = dx;
    }
    if (min != i) {
        scambiaOrdini(&heap->ordini[i], &heap->ordini[min]);
        heapifyOrdini(heap, min);
    }
}

void inserisciOrdineHeap(MinHeap* heap, int tempo_arrivo, char* ricetta, int quantita) {
    if (heap->dimensione == heap->capacita) {
        heap->capacita *= 2; //Puoi provare 1.5
        heap->ordini = (OrdineHeap*) realloc(heap->ordini, heap->capacita * sizeof(OrdineHeap));
        }
    int i = heap->dimensione++;
    heap->ordini[i].tempo_arrivo = tempo_arrivo;
    strcpy(heap->ordini[i].ricetta, ricetta);
    heap->ordini[i].quantita = quantita;
    while (i != 0 && heap->ordini[(i-1)/2].tempo_arrivo > heap->ordini[i].tempo_arrivo) {
        scambiaOrdini(&heap->ordini[i], &heap->ordini[(i-1)/2]);
        i = (i-1)/2;
    }
}

int heapVuotoMinOrdine(MinHeap* heap) {
    return heap->dimensione == 0;
}

MinHeap* creaMinHeap(int capacita) {
    MinHeap* heap = (MinHeap*)malloc(sizeof(MinHeap));
    heap->ordini = (OrdineHeap*)malloc(capacita*sizeof(OrdineHeap));
    heap->dimensione = 0;
    heap->capacita = capacita;
    return heap;
}

OrdineHeap rimuoviMin(MinHeap* heap) {
    if (heap->dimensione == 0) {
        OrdineHeap ordineVuoto = {0, "", 0};
        return ordineVuoto;
    }
    OrdineHeap min = heap->ordini[0];
    heap->ordini[0] = heap->ordini[heap->dimensione - 1];
    heap->dimensione--;
    heapifyOrdini(heap, 0);
    return min;
}

//MaxHeap Spedizioni
void heapifySpedizioni(MaxHeapSpedizioni* heap, int i) {
    int max = i;
    int sx = 2*i +1;
    int dx = 2*i+ 2;
    if (sx < heap->dimensione && (heap->spedizioni[sx].peso > heap->spedizioni[max].peso ||
       (heap->spedizioni[sx].peso == heap->spedizioni[max].peso &&
        heap->spedizioni[sx].istante_arrivo < heap->spedizioni[max].istante_arrivo))) {
        max = sx;
    }
    if (dx < heap->dimensione && (heap->spedizioni[dx].peso > heap->spedizioni[max].peso ||
       (heap->spedizioni[dx].peso == heap->spedizioni[max].peso &&
        heap->spedizioni[dx].istante_arrivo < heap->spedizioni[max].istante_arrivo))) {
        max = dx;
    }
    if (max != i) {
        Spedizione temp = heap->spedizioni[i];
        heap->spedizioni[i] = heap->spedizioni[max];
        heap->spedizioni[max] = temp;
        heapifySpedizioni(heap, max);
    }
}

void inserisciSpedizione(MaxHeapSpedizioni* heap, char* nome, int istante_arrivo, int quantita, int peso) {
    if (heap->dimensione == heap->capacita) {
        heap->capacita *= 2;
        heap->spedizioni = (Spedizione*) realloc(heap->spedizioni, heap->capacita * sizeof(Spedizione));
    }
    int i = heap->dimensione++;
    strcpy(heap->spedizioni[i].nome, nome);
    heap->spedizioni[i].istante_arrivo = istante_arrivo;
    heap->spedizioni[i].quantita = quantita;
    heap->spedizioni[i].peso = peso;
    while (i != 0) {
        int parent = (i - 1) / 2;
        if (heap->spedizioni[parent].peso < heap->spedizioni[i].peso) {
            Spedizione temp = heap->spedizioni[i];
            heap->spedizioni[i] = heap->spedizioni[parent];
            heap->spedizioni[parent] = temp;
            i = parent;
        }
        else if (heap->spedizioni[parent].peso == heap->spedizioni[i].peso &&
                 heap->spedizioni[parent].istante_arrivo > heap->spedizioni[i].istante_arrivo) {
            Spedizione temp = heap->spedizioni[i];
            heap->spedizioni[i] = heap->spedizioni[parent];
            heap->spedizioni[parent] = temp;
            i = parent;
        }
        else {
            break;
        }
    }
}

void liberaMaxHeap(MaxHeapSpedizioni* heap) {
    free(heap->spedizioni);
    free(heap);
}

MaxHeapSpedizioni* creaMaxHeap(int capacita) {
    MaxHeapSpedizioni* heap = (MaxHeapSpedizioni*)malloc(sizeof(MaxHeapSpedizioni));
    heap->spedizioni = (Spedizione*) malloc(capacita * sizeof(Spedizione));
    heap->dimensione = 0;
    heap->capacita = capacita;
    return heap;
}

Spedizione rimuoviMax(MaxHeapSpedizioni* heap) {
    if (heap->dimensione <= 0) {
        Spedizione nullSpedizione = {"", 0, 0, 0};
        return nullSpedizione;
    }
    Spedizione root = heap->spedizioni[0];
    if (heap->dimensione == 1) {
        heap->dimensione--;
        return root;
    }
    heap->spedizioni[0] = heap->spedizioni[--heap->dimensione];
    heapifySpedizioni(heap, 0);
    return root;
}

int MaxHeapVuoto(MaxHeapSpedizioni* heap) {
    return heap->dimensione == 0;
}
